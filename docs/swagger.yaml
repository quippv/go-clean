definitions:
  dto.CreateUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserResponseDTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  http.ResponseError:
    properties:
      message:
        type: string
      reason:
        type: string
    type: object
info:
  contact: {}
paths:
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/http.ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.ResponseError'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a user by their UUID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Invalid UUID provided
          schema:
            $ref: '#/definitions/http.ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/http.ResponseError'
      summary: Get a user by ID
      tags:
      - users
swagger: "2.0"
